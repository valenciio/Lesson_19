plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2'
}

allure {
    report {
        version.set("2.27.0")
    }
    adapter {
        aspectjVersion.set("1.9.22")
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set("2.27.0")
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(
            'com.codeborne:selenide:7.2.3',
            'org.junit.jupiter:junit-jupiter:5.10.2',
            'com.github.javafaker:javafaker:1.0.2',
            'org.slf4j:slf4j-simple:2.0.7',
            'com.codeborne:pdf-test:1.8.0',
            'org.assertj:assertj-core:3.23.1',
            'io.qameta.allure:allure-selenide:2.27.0'
    )
}

tasks.named('allureReport', Exec) {
    dependsOn 'test'
    commandLine 'cmd', '/c', 'build\\allure\\commandline\\bin\\allure.bat', 'generate', 'build\\allure-results', '--clean'
}

tasks.named('allureServe', Exec) {
    dependsOn 'allureReport'
    commandLine 'cmd', '/c', 'build\\allure\\commandline\\bin\\allure.bat', 'serve', 'build\\allure-results'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    systemProperties(System.getProperties())
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
}
task full_test(type: Test) {
    useJUnitPlatform { includeTags("fullTests") }
}

task simple_test(type: Test) {
    useJUnitPlatform { includeTags("simple") }
}

task menu_test(type: Test) {
    useJUnitPlatform { includeTags("menu") }
}